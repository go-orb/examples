// Code generated by protoc-gen-go-orb. DO NOT EDIT.
//
// version:
// - protoc-gen-go-orb        v0.0.1
// - protoc                   v5.29.2
//
// Proto source: lobby_v1/lobby_v1.proto

package lobby_v1

import (
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

import (
	"context"

	"github.com/go-orb/go-orb/client"
	"github.com/go-orb/go-orb/log"
	"github.com/go-orb/go-orb/server"

	grpc "google.golang.org/grpc"

	mdrpc "github.com/go-orb/plugins/server/drpc"
	memory "github.com/go-orb/plugins/server/memory"
)

// HandlerLobbyService is the name of a service, it's here to static type/reference.
const HandlerLobbyService = "lobby.v1.LobbyService"
const EndpointLobbyServiceListGames = "/lobby.v1.LobbyService/ListGames"

// LobbyServiceClient is the client for lobby.v1.LobbyService
type LobbyServiceClient struct {
	client client.Client
}

// NewLobbyServiceClient creates a new client for lobby.v1.LobbyService
func NewLobbyServiceClient(client client.Client) *LobbyServiceClient {
	return &LobbyServiceClient{client: client}
}

// ListGames requests ListGames.
func (c *LobbyServiceClient) ListGames(ctx context.Context, service string, req *emptypb.Empty, opts ...client.CallOption) (*ListGamesResponse, error) {
	return client.Request[ListGamesResponse](ctx, c.client, service, EndpointLobbyServiceListGames, req, opts...)
}

// LobbyServiceHandler is the Handler for lobby.v1.LobbyService
type LobbyServiceHandler interface {
	ListGames(ctx context.Context, req *emptypb.Empty) (*ListGamesResponse, error)
}

// registerLobbyServiceDRPCHandler registers the service to an dRPC server.
func registerLobbyServiceDRPCHandler(srv *mdrpc.Server, handler LobbyServiceHandler) error {
	desc := DRPCLobbyServiceDescription{}

	// Register with the server/drpc(.Mux).
	err := srv.Router().Register(handler, desc)
	if err != nil {
		return err
	}

	// Add each endpoint name of this handler to the orb drpc server.
	srv.AddEndpoint("/lobby.v1.LobbyService/ListGames")

	return nil
}

// registerLobbyServiceMemoryHandler registers the service to an dRPC server.
func registerLobbyServiceMemoryHandler(srv *memory.Server, handler LobbyServiceHandler) error {
	desc := DRPCLobbyServiceDescription{}

	// Register with the server/drpc(.Mux).
	err := srv.Router().Register(handler, desc)
	if err != nil {
		return err
	}

	// Add each endpoint name of this handler to the orb drpc server.
	srv.AddEndpoint("/lobby.v1.LobbyService/ListGames")

	return nil
}

// RegisterLobbyServiceHandler will return a registration function that can be
// provided to entrypoints as a handler registration.
func RegisterLobbyServiceHandler(handler LobbyServiceHandler) server.RegistrationFunc {
	return func(s any) {
		switch srv := s.(type) {

		case grpc.ServiceRegistrar:
			registerLobbyServiceGRPCHandler(srv, handler)
		case *mdrpc.Server:
			registerLobbyServiceDRPCHandler(srv, handler)
		case *memory.Server:
			registerLobbyServiceMemoryHandler(srv, handler)
		default:
			log.Warn("No provider for this server found", "proto", "lobby_v1/lobby_v1.proto", "handler", "LobbyService", "server", s)
		}
	}
}
