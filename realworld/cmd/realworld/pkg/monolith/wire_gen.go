// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/go-orb/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package monolith

import (
	"fmt"
	"github.com/go-orb/examples/realworld/service/httpgateway/pkg/serviceproxy"
	"github.com/go-orb/examples/realworld/service/lobby/pkg/service"
	"github.com/go-orb/go-orb/cli"
	service2 "github.com/go-orb/service/httpgateway/pkg/service"
)

// Injectors from wire.go:

// ProvideRunner provides a runner for the service.
func ProvideRunner(appContext *cli.AppContext, appConfigData cli.AppConfigData, flags []*cli.Flag) (Runner, error) {
	runner, err := serviceproxy.ProvideRunner(appContext, appConfigData, flags)
	if err != nil {
		return nil, err
	}
	serviceRunner, err := service.ProvideRunner(appContext, appConfigData, flags)
	if err != nil {
		return nil, err
	}
	serviceContext, err := provideServiceContext(appContext)
	if err != nil {
		return nil, err
	}
	actionServer, err := provideActionServer(serviceContext, runner, serviceRunner)
	if err != nil {
		return nil, err
	}
	monolithRunner, err := provideRunner(appContext, runner, serviceRunner, actionServer)
	if err != nil {
		return nil, err
	}
	return monolithRunner, nil
}

// wire.go:

// Runner is wire type for the Runner function.
type Runner func() error

// ActionServer is wire type for the ActionServer function.
type ActionServer func() error

func provideServiceContext(appContext *cli.AppContext) (*cli.ServiceContext, error) {
	return cli.NewServiceContext(appContext, Name, Version), nil
}

// provideActionServer provides the command action "server".
func provideActionServer(
	serviceContext *cli.ServiceContext,
	httpGatewayRunner service2.Runner,
	lobbyserviceRunner service.Runner,
) (ActionServer, error) {
	return func() error {
		serviceContext.StopWaitGroup().Add(1)

		go func() {
			if err := httpGatewayRunner([]string{"server"}); err != nil {
				serviceContext.ExitAppGracefully(1)
			}
		}()

		serviceContext.StopWaitGroup().Add(1)

		go func() {
			if err := lobbyserviceRunner([]string{"server"}); err != nil {
				serviceContext.ExitAppGracefully(1)
			}
		}()

		serviceContext.StopWaitGroup().Wait()

		return nil
	}, nil
}

// provideRunner provides the runner.
func provideRunner(appContext *cli.AppContext,
	httpGatewayRunner service2.Runner,
	lobbyserviceRunner service.Runner,
	actionServer ActionServer,
) (Runner, error) {
	return func() error {
		switch appContext.SelectedService {
		case serviceproxy.Name:
			appContext.StopWaitGroup.Add(1)
			return httpGatewayRunner(appContext.SelectedCommand[1:])
		case service.Name:
			appContext.StopWaitGroup.Add(1)
			return lobbyserviceRunner(appContext.SelectedCommand[1:])
		case Name:
			switch appContext.SelectedCommand[0] {
			case "server":
				return actionServer()
			default:
				return fmt.Errorf("unknown action: %s", appContext.SelectedCommand[0])
			}
		default:
			return fmt.Errorf("unknown service: %s", appContext.SelectedService)
		}
	}, nil
}
