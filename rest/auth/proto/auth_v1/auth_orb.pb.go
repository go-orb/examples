// Code generated by protoc-gen-go-orb. DO NOT EDIT.
//
// version:
// - protoc-gen-go-orb        v0.0.1
// - protoc                   v5.29.2
//
// Proto source: auth_v1/auth.proto

package auth_v1

import (
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

import (
	"context"

	"github.com/go-orb/go-orb/client"
	"github.com/go-orb/go-orb/log"
	"github.com/go-orb/go-orb/server"

	mdrpc "github.com/go-orb/plugins/server/drpc"
)

// HandlerAuth is the name of a service, it's here to static type/reference.
const HandlerAuth = "auth.v1.Auth"

// AuthClient is the client for auth.v1.Auth
type AuthClient struct {
	client client.Client
}

// NewAuthClient creates a new client for auth.v1.Auth
func NewAuthClient(client client.Client) *AuthClient {
	return &AuthClient{client: client}
}

// Login calls Login.
func (c *AuthClient) Login(ctx context.Context, service string, req *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	return client.Call[LoginResponse](ctx, c.client, service, "auth.v1.Auth/Login", req, opts...)
}

// Introspect calls Introspect.
func (c *AuthClient) Introspect(ctx context.Context, service string, req *emptypb.Empty, opts ...client.CallOption) (*IntrospectResponse, error) {
	return client.Call[IntrospectResponse](ctx, c.client, service, "auth.v1.Auth/Introspect", req, opts...)
}

// AuthHandler is the Handler for auth.v1.Auth
type AuthHandler interface {
	Login(ctx context.Context, req *LoginRequest) (*LoginResponse, error)

	Introspect(ctx context.Context, req *emptypb.Empty) (*IntrospectResponse, error)
}

// registerAuthDRPCHandler registers the service to an dRPC server.
func registerAuthDRPCHandler(srv *mdrpc.Server, handler AuthHandler) error {
	desc := DRPCAuthDescription{}

	// Register with DRPC.
	r := srv.Router()

	// Register with the server/drpc(.Mux).
	err := r.Register(handler, desc)
	if err != nil {
		return err
	}

	// Add each endpoint name of this handler to the orb drpc server.
	srv.AddEndpoint("/auth.v1.Auth/Login")
	srv.AddEndpoint("/auth.v1.Auth/Introspect")

	return nil
}

// RegisterAuthHandler will return a registration function that can be
// provided to entrypoints as a handler registration.
func RegisterAuthHandler(handler AuthHandler) server.RegistrationFunc {
	return func(s any) {
		switch srv := s.(type) {

		case *mdrpc.Server:
			registerAuthDRPCHandler(srv, handler)
		default:
			log.Warn("No provider for this server found", "proto", "auth_v1/auth.proto", "handler", "Auth", "server", s)
		}
	}
}
