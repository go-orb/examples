// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/go-orb/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package monolith

import (
	"fmt"
	"github.com/go-orb/examples/cmd/foobar/service/service1/pkg/service"
	"github.com/go-orb/go-orb/cli"
)

// Injectors from wire.go:

// ProvideRunner provides a runner for the service.
func ProvideRunner(appContext *cli.AppContext, flags []*cli.Flag) (Runner, error) {
	serviceContext, err := provideServiceContext(appContext)
	if err != nil {
		return nil, err
	}
	runner, err := service.ProvideRunner(appContext, flags)
	if err != nil {
		return nil, err
	}
	actionServer, err := provideActionServer(serviceContext, runner)
	if err != nil {
		return nil, err
	}
	monolithRunner, err := provideRunner(serviceContext, actionServer)
	if err != nil {
		return nil, err
	}
	return monolithRunner, nil
}

// wire.go:

// Runner is wire type for the Runner function.
type Runner func(command []string) error

// ActionServer is wire type for the ActionServer function.
type ActionServer func() error

func provideServiceContext(appContext *cli.AppContext) (*cli.ServiceContext, error) {
	return cli.NewServiceContext(appContext, Name, Version), nil
}

// provideActionServer provides the command action "server".
func provideActionServer(serviceContext *cli.ServiceContext, service1Runner service.Runner) (ActionServer, error) {
	return func() error {
		serviceContext.StopWaitGroup().Add(1)

		go func() {
			if err := service1Runner([]string{"server"}); err != nil {
				serviceContext.StopWaitGroup().Done()
				serviceContext.ExitAppGracefully(1)
			}
		}()

		serviceContext.StopWaitGroup().Wait()

		return nil
	}, nil
}

// provideRunner provides the runner.
func provideRunner(serviceContext *cli.ServiceContext, actionServer ActionServer) (Runner, error) {
	return Runner(func(command []string) error {
		switch command[0] {
		case "server":
			return actionServer()
		default:
			return fmt.Errorf("unknown action: %s", command[0])
		}
	}), nil
}
