// Code generated by protoc-gen-go-orb. DO NOT EDIT.
//
// version:
// - protoc-gen-go-orb        v0.0.1
// - protoc                   v5.29.2
//
// Proto source: echo/echo.proto

package echo

import (
	"context"
	"fmt"

	"github.com/go-orb/go-orb/client"
	"github.com/go-orb/go-orb/log"
	"github.com/go-orb/go-orb/server"

	"google.golang.org/protobuf/proto"
	"storj.io/drpc"

	grpc "google.golang.org/grpc"

	mdrpc "github.com/go-orb/plugins/server/drpc"
	memory "github.com/go-orb/plugins/server/memory"

	mhttp "github.com/go-orb/plugins/server/http"
)

// HandlerEcho is the name of a service, it's here to static type/reference.
const HandlerEcho = "echo.Echo"
const EndpointEchoEcho = "/echo.Echo/Echo"

// orbEncoding_Echo_proto is a protobuf encoder for the echo.Echo service.
type orbEncoding_Echo_proto struct{}

// Marshal implements the drpc.Encoding interface.
func (orbEncoding_Echo_proto) Marshal(msg drpc.Message) ([]byte, error) {
	m, ok := msg.(proto.Message)
	if !ok {
		return nil, fmt.Errorf("message is not a proto.Message: %T", msg)
	}
	return proto.Marshal(m)
}

// Unmarshal implements the drpc.Encoding interface.
func (orbEncoding_Echo_proto) Unmarshal(data []byte, msg drpc.Message) error {
	m, ok := msg.(proto.Message)
	if !ok {
		return fmt.Errorf("message is not a proto.Message: %T", msg)
	}
	return proto.Unmarshal(data, m)
}

// Name implements the drpc.Encoding interface.
func (orbEncoding_Echo_proto) Name() string {
	return "proto"
}

// EchoClient is the client for echo.Echo
type EchoClient struct {
	client client.Client
}

// NewEchoClient creates a new client for echo.Echo
func NewEchoClient(client client.Client) *EchoClient {
	return &EchoClient{client: client}
}

// Echo requests Echo.
func (c *EchoClient) Echo(ctx context.Context, service string, req *Req, opts ...client.CallOption) (*Resp, error) {
	return client.Request[Resp](ctx, c.client, service, EndpointEchoEcho, req, opts...)
}

// EchoHandler is the Handler for echo.Echo
type EchoHandler interface {
	Echo(ctx context.Context, req *Req) (*Resp, error)
}

// orbGRPCEcho provides the adapter to convert a EchoHandler to a gRPC EchoServer.
type orbGRPCEcho struct {
	handler EchoHandler
}

// Echo implements the EchoServer interface by adapting to the EchoHandler.
func (s *orbGRPCEcho) Echo(ctx context.Context, req *Req) (*Resp, error) {
	return s.handler.Echo(ctx, req)
}

// Stream adapters to convert gRPC streams to ORB streams.

// Verification that our adapters implement the required interfaces.
var _ EchoServer = (*orbGRPCEcho)(nil)

// registerEchoGRPCServerHandler registers the service to a gRPC server.
func registerEchoGRPCServerHandler(srv grpc.ServiceRegistrar, handler EchoHandler) {
	// Create the adapter to convert from EchoHandler to EchoServer
	grpcHandler := &orbGRPCEcho{handler: handler}

	srv.RegisterService(&Echo_ServiceDesc, grpcHandler)
}

// orbDRPCEchoHandler wraps a EchoHandler to implement DRPCEchoServer.
type orbDRPCEchoHandler struct {
	handler EchoHandler
}

// Echo implements the DRPCEchoServer interface by adapting to the EchoHandler.
func (w *orbDRPCEchoHandler) Echo(ctx context.Context, req *Req) (*Resp, error) {
	return w.handler.Echo(ctx, req)
}

// Stream adapters to convert DRPC streams to ORB streams.

// Verification that our adapters implement the required interfaces.
var _ DRPCEchoServer = (*orbDRPCEchoHandler)(nil)

// registerEchoDRPCHandler registers the service to an dRPC server.
func registerEchoDRPCHandler(srv *mdrpc.Server, handler EchoHandler) error {
	desc := DRPCEchoDescription{}

	// Wrap the ORB handler with our adapter to make it compatible with DRPC.
	drpcHandler := &orbDRPCEchoHandler{handler: handler}

	// Register with the server/drpc(.Mux).
	err := srv.Router().Register(drpcHandler, desc)
	if err != nil {
		return err
	}

	// Add each endpoint name of this handler to the orb drpc server.
	srv.AddEndpoint("/echo.Echo/Echo")

	return nil
}

// registerEchoMemoryHandler registers the service to a memory server.
func registerEchoMemoryHandler(srv *memory.Server, handler EchoHandler) error {
	desc := DRPCEchoDescription{}

	// Wrap the ORB handler with our adapter to make it compatible with DRPC.
	drpcHandler := &orbDRPCEchoHandler{handler: handler}

	// Register with the server/drpc(.Mux).
	err := srv.Router().Register(drpcHandler, desc)
	if err != nil {
		return err
	}

	// Add each endpoint name of this handler to the orb drpc server.
	srv.AddEndpoint("/echo.Echo/Echo")

	return nil
}

// registerEchoHTTPHandler registers the service to an HTTP server.
func registerEchoHTTPHandler(srv *mhttp.Server, handler EchoHandler) {
	srv.Router().Post("/echo.Echo/Echo", mhttp.NewGRPCHandler(srv, handler.Echo, HandlerEcho, "Echo"))
}

// RegisterEchoHandler will return a registration function that can be
// provided to entrypoints as a handler registration.
func RegisterEchoHandler(handler any) server.RegistrationFunc {
	return func(s any) {
		switch srv := s.(type) {

		case grpc.ServiceRegistrar:
			registerEchoGRPCServerHandler(srv, handler.(EchoHandler))
		case *mdrpc.Server:
			registerEchoDRPCHandler(srv, handler.(EchoHandler))
		case *memory.Server:
			registerEchoMemoryHandler(srv, handler.(EchoHandler))
		case *mhttp.Server:
			registerEchoHTTPHandler(srv, handler.(EchoHandler))
		default:
			log.Warn("No provider for this server found", "proto", "echo/echo.proto", "handler", "Echo", "server", s)
		}
	}
}
