// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"fmt"
	"github.com/go-orb/examples/benchmarks/rps_no_hertz/handler/echo"
	echo2 "github.com/go-orb/examples/benchmarks/rps_no_hertz/proto/echo"
	"github.com/go-orb/go-orb/config"
	"github.com/go-orb/go-orb/log"
	"github.com/go-orb/go-orb/registry"
	"github.com/go-orb/go-orb/server"
	"github.com/go-orb/go-orb/types"
	"github.com/go-orb/plugins/server/drpc"
	"github.com/go-orb/plugins/server/grpc"
	"github.com/go-orb/plugins/server/http"
	"github.com/hashicorp/consul/sdk/freeport"
	"net/url"
)

import (
	_ "github.com/go-orb/plugins/codecs/jsonpb"
	_ "github.com/go-orb/plugins/codecs/proto"
	_ "github.com/go-orb/plugins/codecs/yaml"
	_ "github.com/go-orb/plugins/config/source/cli/urfave"
	_ "github.com/go-orb/plugins/config/source/file"
	_ "github.com/go-orb/plugins/log/lumberjack"
	_ "github.com/go-orb/plugins/log/slog"
	_ "github.com/go-orb/plugins/registry/consul"
	_ "github.com/go-orb/plugins/registry/mdns"
	_ "github.com/go-orb/plugins/server/http/router/chi"
)

// Injectors from wire.go:

// newComponents combines everything above and returns a slice of components.
func newComponents(serviceName types.ServiceName, serviceVersion types.ServiceVersion) ([]types.Component, error) {
	configData, err := provideConfigData(serviceName, serviceVersion)
	if err != nil {
		return nil, err
	}
	v := _wireValue
	logger, err := log.ProvideLogger(serviceName, configData, v...)
	if err != nil {
		return nil, err
	}
	v2 := _wireValue2
	registryType, err := registry.ProvideRegistry(serviceName, serviceVersion, configData, logger, v2...)
	if err != nil {
		return nil, err
	}
	v3, err := provideServerOpts()
	if err != nil {
		return nil, err
	}
	serverServer, err := server.ProvideServer(serviceName, configData, logger, registryType, v3...)
	if err != nil {
		return nil, err
	}
	v4, err := provideComponents(serviceName, serviceVersion, configData, logger, registryType, serverServer)
	if err != nil {
		return nil, err
	}
	return v4, nil
}

var (
	_wireValue  = []log.Option{}
	_wireValue2 = []registry.Option{}
)

// wire.go:

// provideConfigData reads the config from cli and returns it.
func provideConfigData(
	serviceName types.ServiceName,
	serviceVersion types.ServiceVersion,
) (types.ConfigData, error) {
	u, err := url.Parse("cli://urfave")
	if err != nil {
		return nil, err
	}

	cfgSections := types.SplitServiceName(serviceName)

	data, err := config.Read([]*url.URL{u}, cfgSections)

	return data, err
}

// provideServerOpts provides options for the go-orb server.
// TODO(jochumdev): We should simplify server opts.
func provideServerOpts() ([]server.Option, error) {

	ports, err := freeport.Take(8)
	if err != nil {
		return nil, err
	}

	hInstance := new(echo.Handler)

	return []server.Option{grpc.WithEntrypoint(grpc.WithName("grpc"), grpc.WithAddress(fmt.Sprintf("127.0.0.1:%d", ports[0])), grpc.WithInsecure(true), grpc.WithRegistration("Streams", echo2.RegisterEchoService(hInstance))), http.WithEntrypoint(http.WithName("http"), http.WithAddress(fmt.Sprintf("127.0.0.1:%d", ports[3])), http.WithInsecure(), http.WithRegistration("Streams", echo2.RegisterEchoService(hInstance))), http.WithEntrypoint(http.WithName("h2c"), http.WithAddress(fmt.Sprintf("127.0.0.1:%d", ports[4])), http.WithInsecure(), http.WithAllowH2C(), http.WithRegistration("Streams", echo2.RegisterEchoService(hInstance))), http.WithEntrypoint(http.WithName("http3"), http.WithAddress(fmt.Sprintf("127.0.0.1:%d", ports[5])), http.WithHTTP3(), http.WithRegistration("Streams", echo2.RegisterEchoService(hInstance))), http.WithEntrypoint(http.WithName("https"), http.WithAddress(fmt.Sprintf("127.0.0.1:%d", ports[6])), http.WithRegistration("Streams", echo2.RegisterEchoService(hInstance))), drpc.WithEntrypoint(drpc.WithName("dprc"), drpc.WithAddress(fmt.Sprintf("127.0.0.1:%d", ports[7])), drpc.WithRegistration("Streams", echo2.RegisterEchoService(hInstance))),
	}, nil
}

// provideComponents creates a slice of components out of the arguments.
func provideComponents(
	serviceName types.ServiceName,
	serviceVersion types.ServiceVersion,
	cfgData types.ConfigData,
	logger log.Logger,
	reg registry.Type,
	srv server.Server,
) ([]types.Component, error) {
	components := []types.Component{}
	components = append(components, logger)
	components = append(components, reg)
	components = append(components, &srv)

	return components, nil
}
