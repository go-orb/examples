// Code generated by protoc-gen-go-orb. DO NOT EDIT.
//
// version:
// - protoc-gen-go-orb        v0.0.1
// - protoc                   v5.27.2
//
// source: echo/echo.proto

package echo

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_echo_echo_proto struct{}

func (drpcEncoding_File_echo_echo_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_echo_echo_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_echo_echo_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_echo_echo_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_echo_echo_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCEchoServer interface {
	Echo(context.Context, *Req) (*Resp, error)
}

type DRPCEchoUnimplementedServer struct{}

func (s *DRPCEchoUnimplementedServer) Echo(context.Context, *Req) (*Resp, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCEchoDescription struct{}

func (DRPCEchoDescription) NumMethods() int { return 1 }

func (DRPCEchoDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/echo.Echo/Echo", drpcEncoding_File_echo_echo_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCEchoServer).
					Echo(
						ctx,
						in1.(*Req),
					)
			}, DRPCEchoServer.Echo, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterEcho(mux drpc.Mux, impl DRPCEchoServer) error {
	return mux.Register(impl, DRPCEchoDescription{})
}

type DRPCEcho_EchoStream interface {
	drpc.Stream
	SendAndClose(*Resp) error
}

type drpcEcho_EchoStream struct {
	drpc.Stream
}

func (x *drpcEcho_EchoStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcEcho_EchoStream) SendAndClose(m *Resp) error {
	if err := x.MsgSend(m, drpcEncoding_File_echo_echo_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
