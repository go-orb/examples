// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/go-orb/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"fmt"
	"github.com/go-orb/go-orb/cli"
	"github.com/go-orb/go-orb/event"
	"github.com/go-orb/go-orb/log"
	"github.com/go-orb/go-orb/types"
	"github.com/go-orb/plugins/cli/urfave"
	"os/signal"
	"syscall"
)

import (
	_ "github.com/go-orb/plugins/codecs/goccyjson"
	_ "github.com/go-orb/plugins/codecs/proto"
	_ "github.com/go-orb/plugins/event/natsjs"
	_ "github.com/go-orb/plugins/log/slog"
)

// Injectors from wire.go:

func run(appContext *cli.AppContext, args []string, cb wireRunCallback) (wireRunResult, error) {
	serviceContext, err := cli.ProvideSingleServiceContext(appContext)
	if err != nil {
		return wireRunResult{}, err
	}
	v, err := types.ProvideComponents()
	if err != nil {
		return wireRunResult{}, err
	}
	appConfigData, err := cli.ProvideAppConfigData(appContext)
	if err != nil {
		return wireRunResult{}, err
	}
	parserFunc, err := urfave.ProvideParser()
	if err != nil {
		return wireRunResult{}, err
	}
	v2, err := cli.ProvideParsedFlagsFromArgs(appContext, parserFunc, args)
	if err != nil {
		return wireRunResult{}, err
	}
	serviceContextHasConfigData, err := cli.ProvideServiceConfigData(serviceContext, appConfigData, v2)
	if err != nil {
		return wireRunResult{}, err
	}
	logger, err := log.ProvideNoOpts(serviceContextHasConfigData, serviceContext, v)
	if err != nil {
		return wireRunResult{}, err
	}
	eventType, err := event.ProvideNoOpts(serviceContext, v, logger)
	if err != nil {
		return wireRunResult{}, err
	}
	mainWireRunResult, err := wireRun(serviceContext, v, logger, eventType, cb)
	if err != nil {
		return wireRunResult{}, err
	}
	return mainWireRunResult, nil
}

// wire.go:

// wireRunResult is here so "wire" has a type for the return value of wireRun.
type wireRunResult struct{}

// wireRunCallback is the actual code that runs the business logic.
type wireRunCallback func(
	svcCtx *cli.ServiceContext,
	logger log.Logger,
	eventHandler event.Type,
) error

func wireRun(
	serviceContext *cli.ServiceContext,
	components *types.Components,
	logger log.Logger, event2 event.Type,

	cb wireRunCallback,
) (wireRunResult, error) {
	ctx, cancel := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)
	defer cancel()

	for _, c := range components.Iterate(false) {
		err := c.Start(ctx)
		if err != nil {
			logger.Error("Failed to start", "error", err, "component", fmt.Sprintf("%s/%s", c.Type(), c.String()))
			return wireRunResult{}, err
		}
	}

	runErr := cb(serviceContext, logger, event2)

	ctx = context.Background()

	for _, c := range components.Iterate(true) {
		err := c.Stop(ctx)
		if err != nil {
			logger.Error("Failed to stop", "error", err, "component", fmt.Sprintf("%s/%s", c.Type(), c.String()))
		}
	}

	return wireRunResult{}, runErr
}
